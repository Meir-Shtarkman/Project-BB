#include "party.h"


char* Party::getName()	const
{
	return Name;
}
Party::Spectrum Party::getPolitical_spectrum()	const
{
	return Political_spectrum;
}
Establishment_Date Party::getDate()	const
{
	return Date;
}
Citizen* Party::getCitizen(const int& num)	const
{
	return Candidates[num];
}
Citizen**	Party::getCandidateList()	const
{
	return Candidates;
}


bool Party::setName(char* temp)
{
	int size = (strlen(temp) + 1);
	if (size >= 2) {
		Name = new char[size];
		strcpy_s(Name,size, temp);
		return true;
	}
	else return false;
}

bool Party::setPolitical_spectrum(const Party::Spectrum& temp)
{
	Political_spectrum = temp;
	return true;
}
bool Party::setDate(Establishment_Date& temp)
{
	if (((temp.getYear() >= 1 && temp.getYear() <= 2020)) && (temp.getMonth() >= 1 && temp.getMonth() <= 12)
		&& (temp.getday() >= 1 && temp.getday() <= 31))
	{
		Date.setDay(temp.getday());
		Date.setMonth(temp.getMonth());
		Date.setYear(temp.getYear());
		return true;
	}
	else return false;
}

bool Party::isInCandidate(char* temp)	const
{
	for (int i = 0; i < log; i++)
	{
		if (strcmp(Candidates[i]->getID(), temp) == 0)
			return true;
	}
	return false;
}

bool Party::increaseList(Citizen** temp)
{
	phy *= 2;
	Candidates = new Citizen*[phy];
	for (int i = 0; i < Party::log; i++)
		Candidates[i] = temp[i];
	delete []temp;
	if (!Candidates)
		return false;
	return true;
}

bool Party::addCandidate(Citizen& temp)
{
	if (log >= phy)
	{
		if (!(increaseList(Candidates)))
			return false;
	}
	if (!isInCandidate(temp.getID()))
	{
		Candidates[log] = new Citizen;
		*(Candidates[log]) = temp;
		log++;
		return true;
	}
	else return false;
}
bool Party::openCandidateList()
{
	log = 0;
	phy = 2;
	Candidates = new Citizen*[phy];
	if (!Candidates)
		return false;
	return true;
}


void Party::addVote()
{
	sumVoted++;
}

int Party::getSumVoted()	const
{
	return sumVoted;
}


void Party::showParty()		const
{
	cout << "Party name: " << getName() << endl << "Date of establishment: " << endl;
	getDate().showEstablismentDate();
	cout << "Spectrum: " << spectrumDirrect[(int)getPolitical_spectrum()] << endl<<endl;

}

void Party::freeParty()
{
	delete []Name;
}
