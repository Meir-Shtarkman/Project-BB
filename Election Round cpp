#include "ElectionRoundh.h"

int ElectionRound::getyear() const
{
	return year;
}
int ElectionRound::getmonth() const
{
	return month;
}

int ElectionRound::getlogVoters() const
{
	return logVoters;
}
int ElectionRound::getphyVoters() const
{
	return phyVoters;
}
int ElectionRound::getlogParties() const
{
	return logParties;
}
int ElectionRound::getphyParties() const
{
	return phyParties;
}
int ElectionRound::getlogBallots() const
{
	return logBallots;
}
int ElectionRound::getphyBallots() const
{
	return phyBallots;
}

Voter** ElectionRound::getvoters() const
{
	return voters;
}
Party** ElectionRound::getparties() const
{
	return parties;
}
Ballot** ElectionRound::getballots() const
{
	return ballots;
}


bool ElectionRound::openElctionround(const int& tempMonth,const int& tempYear) {
	if (tempMonth < 1 || tempMonth>12)return false;
	if (tempYear < 1990)return false;
	else {
		year = tempYear;
		month = tempMonth;
		if (!(openVotersList()))
			return false;
		if (!(openBallotList()))
			return false;
		if (!(openPartiesList()))
			return false;
		
		//openPArty
	}
}


bool ElectionRound::isInVoters(char* temp) const
{
	for (int i = 0; i < logVoters; i++)
	{
		if (strcmp(voters[i]->getCivilian().getID(), temp) == 0)
			return true;
	}
	return false;
}
bool ElectionRound::increaseVoterList(Voter** temp)
{
	phyVoters *= 2;
	voters = new Voter *[phyVoters];
	for (int i = 0; i < logVoters; i++)
		voters[i] = temp[i];
	delete []temp;
	if (!voters)
		return false;
	return true;
}
bool ElectionRound::addVoter(Citizen& temp, const int& partyIndex)
{
	if (logVoters >= phyVoters)
	{
		if (!(increaseVoterList(voters)))
			return false;
	}
	if (!isInVoters(temp.getID()))
	{
		voters[logVoters] = new Voter;
		if (!voters[logVoters]->setCivilian(temp))
			return false;
		if (!voters[logVoters]->setVoted(false))
			return false;
		temp.getBallot()->addVoter((voters[logVoters]->getCivilian()));
		if (temp.getCandidate())
		{
			//addCandidate()
			parties[partyIndex]->addCandidate(temp);
		}
		logVoters++;
		return true;
	}
	else return false;
}
bool ElectionRound::openVotersList()
{
	logVoters = 0;
	phyVoters = 2;
	voters = new Voter *[phyVoters];
	if (!voters)
		return false;
	return true;
}



bool ElectionRound::isInBallots(const int& temp) const
{
	for (int i = 0; i < logBallots; i++)
	{
		if (ballots[i]->getID() == temp)
			return true;
	}
	return false;
}
bool ElectionRound::increaseBallotsList(Ballot** temp)
{
	phyBallots *= 2;
	ballots = new Ballot *[phyBallots];
	for (int i = 0; i < logBallots; i++)
		ballots[i] = temp[i];
	delete []temp;
	if (!ballots)
		return false;
	return true;
}
bool ElectionRound::addBallot(const int& TempID,Address& TempAddres)
{
	if (logBallots >= phyBallots)
	{
		if (!(increaseBallotsList(ballots)))
			return false;
	}
	if (!isInBallots(TempID))
	{
		ballots[logBallots] = new Ballot;
		if (!ballots[logBallots]->openVotersListList())
			return false;
		if (!ballots[logBallots]->openSumVotes(phyParties))
			return false;
		if (!ballots[logBallots]->setID(TempID))
			return false;
		if (!ballots[logBallots]->setAddress(TempAddres))
			return false;
		logBallots++;
		return true;
	}
	else return false;
}
bool ElectionRound::openBallotList()
{
	logBallots = 0;
	phyBallots = 2;
	ballots = new Ballot*[phyBallots];
	if (!ballots)
		return false;
	return true;
}

bool ElectionRound::isInParties(char* temp) const
{
	for (int i = 0; i < logParties; i++)
	{
		if (strcmp(parties[i]->getName(), temp) == 0)
			return true;

	}
	return false;
}
bool ElectionRound::increasePartiesList(Party** temp)
{
	phyParties *= 2;
	parties = new Party *[phyParties];
	for (int i = 0; i < logParties; i++)
		parties[i] = temp[i];
	delete []temp;
	if (!parties)
		return false;
	return true;
}
bool ElectionRound::addParty(char* TempName,Establishment_Date& tempDate,const int& tempSpectrum)
{
	if (logParties >= phyParties)
	{
		if (!(increasePartiesList(parties)))
			return false;
	}
	if (!isInParties(TempName))
	{
		parties[logParties] = new Party;
		if (!(parties[logParties])->setName(TempName))
			return false;
		if (!(parties[logParties]->setDate(tempDate)))
			return false;
		if (!(parties[logParties]->setPolitical_spectrum((Party::Spectrum)tempSpectrum)))
			return false;
		logParties++;
		return true;
	}
	else return false;
}
bool ElectionRound::openPartiesList()
{
	logParties = 0;
	phyParties = 2;
	parties = new Party *[phyBallots];
	if (!parties)
		return false;
	return true;
}

Citizen ElectionRound::creatCitizen(char* tempName, char* tempID,const int& tempYear, Ballot*
	tempBallot,const bool& tempCandidate)
{
	Citizen citizen;
	if (!(citizen.setName(tempName)))
		exit(0);
	if (!(citizen.setID(tempID)))
		exit(0);
	if (!(citizen.setBirthday(tempYear)))
		exit(0);
	if (!(citizen.setBallot(tempBallot)))
		exit(0);
	citizen.setCandidate(tempCandidate);

	return citizen;
}



void ElectionRound::showAllCivilans() const
{
	cout <<endl<< "All the registerd citizens: " << endl<<endl;
	for (int i = 0; i < logVoters; i++)
	{
		cout << i + 1 << ": " << endl;
		voters[i]->getCivilian().ShowCivilian();
	}
}

void ElectionRound::showAllParties() const
{
	cout << endl << "All the parties data: " << endl<<endl;
	for (int i = 0; i < logParties; i++)
	{
		cout << i + 1 << ": " << endl;
		parties[i]->showParty();
	}
}

void ElectionRound::showAllBallots() const
{
	cout <<endl<< "All the ballots data: " << endl;
	for (int i = 0; i < logBallots; i++)
	{
		ballots[i]->showBallot();
	}
}

void ElectionRound::startElection()
{
	char vote; int partyNumber;
	//run over all the citizens
	for (int i = 0; i < logBallots; i++)
	{
		for (int k = 0; k < ballots[i]->getLogVoters(); k++) {


			cout << "Dear " << ballots[i]->getVoters()[k]->getCivilian().getName() << ", Do you want to vote?"
				<< "if you do, write Y else write N :";
			cin >> vote;
			//if the citizien want to vote
			if (vote == 'Y')
			{
				cout << "Well done! it is super importent to vote!" << endl <<
					"what is the party you want to vote for?" << endl <<
					"insert number of party" << endl;
				//present all the paries that participate
				for (int j = 0; j < logParties; j++)
				{
					cout << (j + 1) << ". " << parties[j]->getName() << endl;
				}
				cin >> partyNumber;

				ballots[i]->getVoters()[k]->setVoted(true); //change that citizen voted
				parties[partyNumber - 1]->addVote(); // add vote to the party
				ballots[i]->addVote(partyNumber - 1);  //add a vote in the specific ballot

			}

		}
	}
}

void ElectionRound::showResults() const
{
	for (int i = 0; i < logBallots; i++)
	{
		cout << "Results of ballot number(by ID) " << ballots[i]->getID() << "are: " << endl;
		for (int j = 0; j < logParties; j++)
		{
			cout << parties[j]->getName() << " = " << ballots[i]->getSumVotes()[j] <<
				endl;
		}

	}
	cout << "and in total: " << endl;
	for (int i = 0; i < logParties; i++)
	{
		cout << parties[i]->getName() << ":  " << parties[i]->getSumVoted() <<
			endl;
	}

}

void ElectionRound::menu() const
{
	cout << "1. Add ballot" << endl << "2. Add Citizen " << endl << "3. Add Party" << endl
		<< "4. Add candidate" << endl << "5. Show all ballots" << endl << "6. Show all citzens"
		<< endl << "7. Show all parties" << endl << "8. Make an election round" <<
		endl << "9. Show the result of the elections" << endl << "10. Exit" << endl;
}

void ElectionRound::freeAll()
{
	for (int i = 0; i < logBallots; i++)
	{
		ballots[i]->freeBallot();
		delete ballots[i];
	}

	delete []ballots;
	

	for (int i = 0; i < logParties; i++)
	{
		parties[i]->freeParty();
		delete parties[i];
	}
	delete []parties;

	for (int i = 0; i < logVoters; i++)
	{
		voters[i]->getCivilian().freeCitizen();
		delete voters[i];
	}
	delete[]voters;
}
