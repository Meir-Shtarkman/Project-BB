#include "ballot.h"

int Ballot::getID() const
{
	return id;
}
Address Ballot::getAddress() const
{
	return address;
}
Voter** Ballot::getVoters() const
{
	return voters;
}

Voter Ballot::getVoter(const int& i) const
{
	return *(voters[i]);
}
float Ballot::getVoters_percent() const
{
	return voters_precent;
}


bool Ballot::setID(const int& temp)
{
	if (temp > 0)
	{
		id = temp;
		return true;
	}
	else return false;
}
bool Ballot::setAddress(Address& temp)
{
	if ((strlen(temp.getCity()) > 1) && (temp.getHouse_Number() > 0) &&
		(strlen(temp.getStreet()) > 0)) {
		address.setCity(temp.getCity());
		address.setStreet(temp.getStreet());
		address.setHouse_Number(temp.getHouse_Number());
		return true;
	}
	else return false;
}
bool Ballot::increaseList(Voter** temp)
{
	phyVoters *= 2;
	voters = new Voter* [phyVoters];
	for (int i = 0; i < logVoters; i++)
		voters[i] = temp[i];
	delete[]temp;
	if (!voters)
		return false;
	return true;
}
//check if the citizen is already inside the voters array
bool Ballot::isInVoters(Citizen& temp) const
{
	for (int i = 0; i < logVoters; i++)
	{
		if (strcmp(voters[i]->getCivilian().getID(),temp.getID()) == 0)
			return true;
		else return false;
	}
}

bool Ballot::addVoter(Citizen& temp)
{
	if (logVoters >= phyVoters)
	{
		if (!(increaseList(voters)))
			return false;
	}
	if (!isInVoters(temp))
	{
		voters[logVoters] = new Voter;
		(voters[logVoters])->setCivilian(temp);
		(voters[logVoters])->setVoted(false);
		logVoters++;
		return true;
	}
	else return false;
}
bool Ballot::openVotersListList()
{
	logVoters = 0;
	phyVoters = 2;
	voters = new Voter *[phyVoters];
	if (!voters)
		return false;
	return true;
}


float Ballot::calculateVoterPercent() 
{
	int sum = 0;
	int i;
	for (i = 0; i < logVoters; i++);
	{
		if (getVoter(i).getVoted())
			sum++;
	}
	voters_precent = (float)(sum / logVoters);
	return voters_precent;
}

int* Ballot::getSumVotes()  const
{
	return sumVotes;
}

bool Ballot::addVote(const int& i)
{
	if (i < phySumVoters)
	{
		(sumVotes[i])++;
		return true;
	}
	return false;
}

bool Ballot::openSumVotes(int temp)
{
	phySumVoters = temp;
	sumVotes = new int[phySumVoters];
	int i;
	if (!sumVotes)
		return false;
	for (i = 0; i < phySumVoters; i++)
		sumVotes[i] = 0;
	return true;

}

bool Ballot::setPhySumVoters(const int& size)
{
	if (size > 0)
	{
		phySumVoters = size;
	}
	else return false;
}

int Ballot::getLogVoters() const
{
	return logVoters;
}

void Ballot::showBallot() const
{
	cout <<endl<< "Ballots number: " << getID() << endl << "Addrees:" << endl;
	getAddress().showAddress();
	cout << "Number of voters: " << getLogVoters() << endl<<endl;
	cout << "Voters data:" << endl<<endl;
	for (int i = 0; i < logVoters ; i++)
	{
	
		getVoter(i).getCivilian().ShowCivilian();
	}
}

void Ballot::freeBallot()
{
	delete []getVoters();
	delete []sumVotes;
	address.freeAddress();
}
