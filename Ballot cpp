#include "ballot.h"

int Ballot::getID()
{
	return id;
}
Address Ballot::getAdress()
{
	return address;
}
Voter** Ballot::getVoters()
{
	return voters;
}

Voter Ballot::getVoter(int i)
{
	return *(voters[i]);
}
float Ballot::getVoters_percent()
{
	return voters_precent;
}


bool Ballot::setID(int temp)
{
	if (temp > 0)
	{
		id = temp;
		return true;
	}
	else return false;
}
bool Ballot::setAddress(Address temp)
{
	if ((strlen(temp.getCity) > 1) && (temp.getHouse_Number > 0) &&
		(strlen(temp.getStreet) > 0)) {
		address = temp;
		return true;
	}
	else return false;
}
bool Ballot::increaseList(Voter** temp)
{
	phyVoters *= 2;
	voters = new Voter *[phyVoters];
	voters = temp;
	if (!voters)
		return false;
	return true;
}
//check if the citizen is already inside the voters array
bool Ballot::isInVoters(Citizen temp)
{
	for (int i = 0; i < logVoters; i++)
	{
		if (strcmp(voters[i]->getCivilian().getID(),temp.getID) == 0)
			return true;
		else return false;
	}
}

bool Ballot::addVoter(Citizen temp)
{
	if (logVoters >= phyVoters)
	{
		if (!(increaseList(voters)))
			return false;
	}
	if (!isInVoters(temp))
	{
		voters[logVoters] = new Voter;
		*(voters[logVoters])->setCivilian = temp;
		*(voters[logVoters])->setVoted = false;
		logVoters++;
		return true;
	}
	else return false;
}
bool Ballot::openVotersListList()
{
	logVoters = 0;
	phyVoters = 2;
	voters = new Voter *[phyVoters];
	if (!voters)
		return false;
	return true;
}


float Ballot::calculateVoterPercent()
{
	int sum = 0;
	int i;
	for (i = 0; i < logVoters; i++);
	{
		if (getVoter(i).getVoted())
			sum++;
	}
	voters_precent = sum / logVoters;
	return voters_precent;
}

int Ballot::getSumVotes(int i)
{
	return sumVotes[i];
}

bool Ballot::addVote(int i)
{
	if (i < phyVoters)
	{
		sumVotes[i]++;
		return true;
	}
	return false;
}

bool Ballot::openSumVotes()
{
	sumVotes = new int[phySumVoters];
	int i;
	if (!sumVotes)
		return false;
	for (i = 0; i < phySumVoters; i++)
		sumVotes[i] = 0;
	return true;

}

bool Ballot::setPhySumVoters(int size)
{
	if (size > 0)
	{
		phySumVoters = size;
	}
	else return false;
}

int Ballot::getLogVoters()
{
	return logVoters;
}
